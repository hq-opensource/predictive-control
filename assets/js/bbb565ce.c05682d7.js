"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9679],{8443:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Model Predictive Control/rpc","title":"RPC","description":"This module handles the Remote Procedure Call (RPC) communication for the MPC system.","source":"@site/docs/Model Predictive Control/rpc.md","sourceDirName":"Model Predictive Control","slug":"/Model Predictive Control/rpc","permalink":"/predictive-control/docs/Model Predictive Control/rpc","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Interpreter","permalink":"/predictive-control/docs/Model Predictive Control/interpreter"},"next":{"title":"Schedule","permalink":"/predictive-control/docs/Model Predictive Control/schedule"}}');var r=n(4848),o=n(8453);const i={sidebar_position:4},c="RPC",d={},l=[{value:"Functions",id:"functions",level:2},{value:"<code>handle_mpc_request(mpc_request: Dict[str, Any]) -&gt; bool</code>",id:"handle_mpc_requestmpc_request-dictstr-any---bool",level:3}];function a(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"rpc",children:"RPC"})}),"\n",(0,r.jsx)(t.p,{children:"This module handles the Remote Procedure Call (RPC) communication for the MPC system."}),"\n",(0,r.jsxs)(t.p,{children:["It sets up a Redis-based message broker using FastStream to listen for incoming MPC requests. The ",(0,r.jsx)(t.code,{children:"handle_mpc_request"})," asynchronous function processes these requests, extracts relevant parameters, and then schedules the main MPC optimization and real-time control jobs. This module acts as the entry point for external systems to trigger MPC runs."]}),"\n",(0,r.jsx)(t.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(t.h3,{id:"handle_mpc_requestmpc_request-dictstr-any---bool",children:(0,r.jsx)(t.code,{children:"handle_mpc_request(mpc_request: Dict[str, Any]) -> bool"})}),"\n",(0,r.jsx)(t.p,{children:"Handles incoming MPC requests via Redis RPC."}),"\n",(0,r.jsx)(t.p,{children:"This asynchronous function acts as a subscriber to the 'mpc' topic. It receives MPC parameters, validates them, and then schedules the main MPC and control jobs. If no parameters are provided, it interprets this as a signal to stop the real-time control job."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Args:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"mpc_request"}),": A dictionary containing the MPC request, expected to have a 'params' key with detailed optimization parameters."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"True"})," if the MPC and control jobs are successfully scheduled, ",(0,r.jsx)(t.code,{children:"False"})," otherwise."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);