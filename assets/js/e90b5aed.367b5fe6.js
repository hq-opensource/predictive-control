"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4330],{438:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>g,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"Utils/logging","title":"Logging","description":"This module provides a centralized utility for configuring and managing application logging.","source":"@site/docs/Utils/logging.md","sourceDirName":"Utils","slug":"/Utils/logging","permalink":"/predictive-control/docs/Utils/logging","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Thermal Models","permalink":"/predictive-control/docs/Thermal Model/thermal_models"}}');var s=i(4848),t=i(8453);const l={sidebar_position:1},r="Logging",g={},a=[{value:"Classes",id:"classes",level:2},{value:"<code>LoggingUtil</code>",id:"loggingutil",level:3},{value:"Methods",id:"methods",level:4},{value:"<code>get_logger(logger_name: str) -&gt; logging.Logger</code>",id:"get_loggerlogger_name-str---logginglogger",level:5}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"logging",children:"Logging"})}),"\n",(0,s.jsx)(n.p,{children:"This module provides a centralized utility for configuring and managing application logging."}),"\n",(0,s.jsxs)(n.p,{children:["It defines the ",(0,s.jsx)(n.code,{children:"LoggingUtil"})," class, which offers a static method to retrieve pre-configured logger instances. This ensures consistent logging practices across the entire application, allowing for standardized log formats and dynamic adjustment of log levels via environment variables."]}),"\n",(0,s.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsx)(n.h3,{id:"loggingutil",children:(0,s.jsx)(n.code,{children:"LoggingUtil"})}),"\n",(0,s.jsx)(n.p,{children:"A utility class for configuring and retrieving loggers."}),"\n",(0,s.jsx)(n.p,{children:"This class provides a static method to get a pre-configured logger instance, ensuring consistent logging format and level across the application. The log level can be controlled via an environment variable."}),"\n",(0,s.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h5,{id:"get_loggerlogger_name-str---logginglogger",children:(0,s.jsx)(n.code,{children:"get_logger(logger_name: str) -> logging.Logger"})}),"\n",(0,s.jsx)(n.p,{children:"Retrieves a configured logger instance."}),"\n",(0,s.jsx)(n.p,{children:"The logger's level is determined by the 'LOGLEVEL' environment variable. If 'LOGLEVEL' is not set or is invalid, it defaults to INFO. The logger outputs messages to the console with a standardized format."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Args:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"logger_name"}),": The name of the logger to retrieve (typically ",(0,s.jsx)(n.code,{children:"__name__"})," of the calling module)."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A configured ",(0,s.jsx)(n.code,{children:"logging.Logger"})," instance."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var o=i(6540);const s={},t=o.createContext(s);function l(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);