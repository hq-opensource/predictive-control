"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[679],{1250:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Model Predictive Control/schedule","title":"Schedule","description":"This module provides utilities for posting control schedules generated by the MPC to the Core API.","source":"@site/docs/Model Predictive Control/schedule.md","sourceDirName":"Model Predictive Control","slug":"/Model Predictive Control/schedule","permalink":"/predictive-control/docs/Model Predictive Control/schedule","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"RPC","permalink":"/predictive-control/docs/Model Predictive Control/rpc"},"next":{"title":"Real-Time Control","permalink":"/predictive-control/docs/Real Time Control/power_limit"}}');var s=o(4848),r=o(8453);const i={sidebar_position:5},c="Schedule",d={},l=[{value:"Functions",id:"functions",level:2},{value:"<code>post_controls_schedule(controls: pd.DataFrame)</code>",id:"post_controls_schedulecontrols-pddataframe",level:3}];function a(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"schedule",children:"Schedule"})}),"\n",(0,s.jsx)(t.p,{children:"This module provides utilities for posting control schedules generated by the MPC to the Core API."}),"\n",(0,s.jsx)(t.p,{children:"It includes functions to convert Pandas DataFrames, which represent the optimal control signals for various devices over time, into a dictionary format compatible with the Core API's scheduling endpoint. This module is crucial for translating the MPC's calculated dispatch decisions into actionable commands for the connected devices."}),"\n",(0,s.jsx)(t.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(t.h3,{id:"post_controls_schedulecontrols-pddataframe",children:(0,s.jsx)(t.code,{children:"post_controls_schedule(controls: pd.DataFrame)"})}),"\n",(0,s.jsx)(t.p,{children:"Posts the generated control schedule to the Core API."}),"\n",(0,s.jsxs)(t.p,{children:["This function takes a Pandas DataFrame containing the optimal control signals for various devices, converts it into a dictionary format expected by the Core API, and then sends it using the ",(0,s.jsx)(t.code,{children:"write_schedule"})," API call."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Args:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"controls"}),": A Pandas DataFrame where the index represents timestamps and columns represent device/entity IDs, with values being the control signals (e.g., power setpoints)."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>c});var n=o(6540);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);