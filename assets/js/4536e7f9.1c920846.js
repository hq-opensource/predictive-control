"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[110],{4377:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"Thermal Model/learn_thermal_model","title":"Learn Thermal Model","description":"This module defines the LearnThermalDynamics class, which manages the learning, validation, and persistence of thermal models for space heating.","source":"@site/docs/Thermal Model/learn_thermal_model.md","sourceDirName":"Thermal Model","slug":"/Thermal Model/learn_thermal_model","permalink":"/predictive-control/docs/Thermal Model/learn_thermal_model","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Real-Time Control","permalink":"/predictive-control/docs/Real Time Control/power_limit"},"next":{"title":"Thermal Models","permalink":"/predictive-control/docs/Thermal Model/thermal_models"}}');var r=t(4848),s=t(8453);const l={sidebar_position:1},a="Learn Thermal Model",d={},o=[{value:"Classes",id:"classes",level:2},{value:"<code>LearnThermalDynamics</code>",id:"learnthermaldynamics",level:3},{value:"Methods",id:"methods",level:4},{value:"<code>__init__()</code>",id:"__init__",level:5},{value:"<code>validate_or_learn_model(start: datetime, stop: datetime) -&gt; Dict[str, Any]</code>",id:"validate_or_learn_modelstart-datetime-stop-datetime---dictstr-any",level:5},{value:"<code>execute_learning(start: datetime, stop: datetime, old_model_exists: bool = True) -&gt; Dict[str, Any]</code>",id:"execute_learningstart-datetime-stop-datetime-old_model_exists-bool--true---dictstr-any",level:5}];function c(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"learn-thermal-model",children:"Learn Thermal Model"})}),"\n",(0,r.jsxs)(i.p,{children:["This module defines the ",(0,r.jsx)(i.code,{children:"LearnThermalDynamics"})," class, which manages the learning, validation, and persistence of thermal models for space heating."]}),"\n",(0,r.jsx)(i.p,{children:"This class is responsible for:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Retrieving historical data (indoor temperature, heater consumption, weather) from the Core API."}),"\n",(0,r.jsx)(i.li,{children:"Preprocessing this data for use in a thermal model learning algorithm."}),"\n",(0,r.jsx)(i.li,{children:"Executing the learning process to derive a state-space thermal model."}),"\n",(0,r.jsx)(i.li,{children:"Validating if an existing thermal model is up-to-date or if re-learning is required."}),"\n",(0,r.jsx)(i.li,{children:"Saving and loading learned thermal models to/from a JSON file for persistence."}),"\n",(0,r.jsx)(i.li,{children:"Providing a default thermal model if learning fails or insufficient data is available."}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"classes",children:"Classes"}),"\n",(0,r.jsx)(i.h3,{id:"learnthermaldynamics",children:(0,r.jsx)(i.code,{children:"LearnThermalDynamics"})}),"\n",(0,r.jsx)(i.p,{children:"Manages the learning, validation, and persistence of thermal models for space heating."}),"\n",(0,r.jsx)(i.h4,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(i.h5,{id:"__init__",children:(0,r.jsx)(i.code,{children:"__init__()"})}),"\n",(0,r.jsxs)(i.p,{children:["Initializes the ",(0,r.jsx)(i.code,{children:"LearnThermalDynamics"})," by retrieving information about all devices."]}),"\n",(0,r.jsx)(i.h5,{id:"validate_or_learn_modelstart-datetime-stop-datetime---dictstr-any",children:(0,r.jsx)(i.code,{children:"validate_or_learn_model(start: datetime, stop: datetime) -> Dict[str, Any]"})}),"\n",(0,r.jsx)(i.p,{children:"Validates if a thermal model exists and is recent; otherwise, it learns a new one."}),"\n",(0,r.jsxs)(i.p,{children:["This method checks for a saved thermal model. If found, it verifies if the model was learned within a ",(0,r.jsx)(i.code,{children:"learning_threshold"})," (e.g., 1 day). If the model is missing, outdated, or cannot be loaded, it triggers the ",(0,r.jsx)(i.code,{children:"execute_learning"})," process."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Args:"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"start"}),": The start datetime for retrieving historical data if learning is needed."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"stop"}),": The stop datetime for retrieving historical data if learning is needed."]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"A dictionary containing the validated, newly learned, or default thermal model."}),"\n"]}),"\n",(0,r.jsx)(i.h5,{id:"execute_learningstart-datetime-stop-datetime-old_model_exists-bool--true---dictstr-any",children:(0,r.jsx)(i.code,{children:"execute_learning(start: datetime, stop: datetime, old_model_exists: bool = True) -> Dict[str, Any]"})}),"\n",(0,r.jsx)(i.p,{children:"Executes the learning process for the thermal models."}),"\n",(0,r.jsxs)(i.p,{children:["This method retrieves historical data, processes it, and then attempts to learn a black-box thermal model using the ",(0,r.jsx)(i.code,{children:"ThermalModels"})," class. If learning fails (e.g., due to insufficient data or optimization issues), it provides either an existing old model or a default model."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Args:"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"start"}),": The start datetime for retrieving historical data."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"stop"}),": The stop datetime for retrieving historical data."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"old_model_exists"}),": A boolean indicating if an old model was found, used for logging purposes."]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"A dictionary containing the learned thermal model parameters (Ax, Au, Aw) and metadata, or a default model if learning is unsuccessful."}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>l,x:()=>a});var n=t(6540);const r={},s=n.createContext(r);function l(e){const i=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);