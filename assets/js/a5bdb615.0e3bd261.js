"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4509],{8404:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Model Predictive Control/interpreter","title":"Interpreter","description":"This module defines the Interpreter class, responsible for processing and persisting MPC optimization results.","source":"@site/docs/Model Predictive Control/interpreter.md","sourceDirName":"Model Predictive Control","slug":"/Model Predictive Control/interpreter","permalink":"/predictive-control/docs/Model Predictive Control/interpreter","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Executor MPC","permalink":"/predictive-control/docs/Model Predictive Control/executor"},"next":{"title":"RPC","permalink":"/predictive-control/docs/Model Predictive Control/rpc"}}');var s=r(4848),n=r(8453);const l={sidebar_position:3},a="Interpreter",o={},d=[{value:"Classes",id:"classes",level:2},{value:"<code>Interpreter</code>",id:"interpreter-1",level:3},{value:"Methods",id:"methods",level:4},{value:"<code>__init__(start: datetime, stop: datetime)</code>",id:"__init__start-datetime-stop-datetime",level:5},{value:"<code>interpret(global_mpc_problem: Problem, space_heating: bool, electric_storage: bool, electric_vehicle: bool, water_heater: bool) -&gt; pd.DataFrame</code>",id:"interpretglobal_mpc_problem-problem-space_heating-bool-electric_storage-bool-electric_vehicle-bool-water_heater-bool---pddataframe",level:5},{value:"<code>load_water_heater_variables(global_mpc_problem: Problem, devices: List[Dict[str, Any]], interval: int = 10) -&gt; Tuple[pd.DataFrame, pd.DataFrame]</code>",id:"load_water_heater_variablesglobal_mpc_problem-problem-devices-listdictstr-any-interval-int--10---tuplepddataframe-pddataframe",level:5},{value:"<code>load_electric_storage_variables(global_mpc_problem: Problem, devices: List[Dict[str, Any]], interval: int = 10) -&gt; Tuple[pd.DataFrame, pd.DataFrame]</code>",id:"load_electric_storage_variablesglobal_mpc_problem-problem-devices-listdictstr-any-interval-int--10---tuplepddataframe-pddataframe",level:5},{value:"<code>load_space_heating_variables(global_mpc_problem: Problem, devices: List[Dict[str, Any]], interval: int = 10) -&gt; Tuple[pd.DataFrame, pd.DataFrame]</code>",id:"load_space_heating_variablesglobal_mpc_problem-problem-devices-listdictstr-any-interval-int--10---tuplepddataframe-pddataframe",level:5}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"interpreter",children:"Interpreter"})}),"\n",(0,s.jsxs)(t.p,{children:["This module defines the ",(0,s.jsx)(t.code,{children:"Interpreter"})," class, responsible for processing and persisting MPC optimization results."]}),"\n",(0,s.jsx)(t.p,{children:"It extracts optimal variable values from the solved CVXPY problem, transforms them into structured data (e.g., Pandas DataFrames), and handles their storage in a time-series database like InfluxDB. The Interpreter ensures that the complex outputs of the MPC solver are converted into actionable and storable insights, providing a clear view of the system's optimized behavior and control signals."}),"\n",(0,s.jsx)(t.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsx)(t.h3,{id:"interpreter-1",children:(0,s.jsx)(t.code,{children:"Interpreter"})}),"\n",(0,s.jsx)(t.p,{children:"Interprets and processes the results of the CVXPY Model Predictive Control (MPC) optimization problem."}),"\n",(0,s.jsx)(t.p,{children:"This class is responsible for extracting optimal variable values from the solved CVXPY problem, transforming them into meaningful data structures (e.g., Pandas DataFrames), and persisting these results to a time-series database like InfluxDB. It handles device-specific result interpretation and data formatting."}),"\n",(0,s.jsx)(t.h4,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h5,{id:"__init__start-datetime-stop-datetime",children:(0,s.jsx)(t.code,{children:"__init__(start: datetime, stop: datetime)"})}),"\n",(0,s.jsx)(t.p,{children:"Initializes the Interpreter with the start and stop times of the optimization horizon."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Args:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"start"}),": The start datetime of the optimization horizon."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"stop"}),": The end datetime of the optimization horizon."]}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"interpretglobal_mpc_problem-problem-space_heating-bool-electric_storage-bool-electric_vehicle-bool-water_heater-bool---pddataframe",children:(0,s.jsx)(t.code,{children:"interpret(global_mpc_problem: Problem, space_heating: bool, electric_storage: bool, electric_vehicle: bool, water_heater: bool) -> pd.DataFrame"})}),"\n",(0,s.jsx)(t.p,{children:"Interprets the results of the global MPC problem and saves them."}),"\n",(0,s.jsxs)(t.p,{children:["This is the main method for processing the optimization output. It iterates through the enabled device types, extracts their respective control and state variables from the solved ",(0,s.jsx)(t.code,{children:"global_mpc_problem"}),", converts them into Pandas DataFrames, and then saves these results to InfluxDB. It also aggregates the control signals into a single DataFrame."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Args:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"global_mpc_problem"}),": The solved CVXPY Problem object."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"space_heating"}),": A boolean indicating if space heating devices were included."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"electric_storage"}),": A boolean indicating if electric storage devices were included."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"electric_vehicle"}),": A boolean indicating if electric vehicle devices were included."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"water_heater"}),": A boolean indicating if water heater devices were included."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"A Pandas DataFrame containing the aggregated control signals for all controllable devices over the optimization horizon."}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"load_water_heater_variablesglobal_mpc_problem-problem-devices-listdictstr-any-interval-int--10---tuplepddataframe-pddataframe",children:(0,s.jsx)(t.code,{children:"load_water_heater_variables(global_mpc_problem: Problem, devices: List[Dict[str, Any]], interval: int = 10) -> Tuple[pd.DataFrame, pd.DataFrame]"})}),"\n",(0,s.jsx)(t.p,{children:"Extracts and processes water heater variables from the solved MPC problem."}),"\n",(0,s.jsxs)(t.p,{children:["This method retrieves the optimal power dispatch and temperature profiles for the water heater from the ",(0,s.jsx)(t.code,{children:"global_mpc_problem"}),"'s variables. It then formats these into Pandas DataFrames for further use and storage."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Args:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"global_mpc_problem"}),": The solved CVXPY Problem object."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"devices"}),": A list of device dictionaries, used to retrieve entity IDs."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"interval"}),": The time step interval in minutes."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["A tuple containing two Pandas DataFrames:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"results_water_heater"}),": Contains the raw power and temperature profiles."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"control_water_heater"}),": Contains the control signals (power) mapped to device entity IDs."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"load_electric_storage_variablesglobal_mpc_problem-problem-devices-listdictstr-any-interval-int--10---tuplepddataframe-pddataframe",children:(0,s.jsx)(t.code,{children:"load_electric_storage_variables(global_mpc_problem: Problem, devices: List[Dict[str, Any]], interval: int = 10) -> Tuple[pd.DataFrame, pd.DataFrame]"})}),"\n",(0,s.jsx)(t.p,{children:"Extracts and processes electric storage variables from the solved MPC problem."}),"\n",(0,s.jsxs)(t.p,{children:["This method retrieves the optimal charge/discharge power, residual energy, and state of charge (SoC) for the electric storage device from the ",(0,s.jsx)(t.code,{children:"global_mpc_problem"}),"'s variables. It then formats these into Pandas DataFrames."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Args:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"global_mpc_problem"}),": The solved CVXPY Problem object."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"devices"}),": A list of device dictionaries, used to retrieve device parameters."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"interval"}),": The time step interval in minutes."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["A tuple containing two Pandas DataFrames:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"results_electric_storage"}),": Contains the raw charge/discharge power, residual energy, net power, and SoC profiles."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"control_electric_storage"}),": Contains the net power control signals mapped to device entity IDs."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"load_space_heating_variablesglobal_mpc_problem-problem-devices-listdictstr-any-interval-int--10---tuplepddataframe-pddataframe",children:(0,s.jsx)(t.code,{children:"load_space_heating_variables(global_mpc_problem: Problem, devices: List[Dict[str, Any]], interval: int = 10) -> Tuple[pd.DataFrame, pd.DataFrame]"})}),"\n",(0,s.jsx)(t.p,{children:"Extracts and processes space heating variables from the solved MPC problem."}),"\n",(0,s.jsxs)(t.p,{children:["This method retrieves the optimal heater power dispatch and indoor temperature profiles for each thermal zone from the ",(0,s.jsx)(t.code,{children:"global_mpc_problem"}),"'s variables. It then formats these into Pandas DataFrames."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Args:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"global_mpc_problem"}),": The solved CVXPY Problem object."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"devices"}),": A list of device dictionaries, used to order thermal zones."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"interval"}),": The time step interval in minutes."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["A tuple containing two Pandas DataFrames:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"results_space_heating"}),": Contains the raw heater power and temperature profiles."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"control_space_heating"}),": Contains the temperature setpoint control signals mapped to thermal zone entity IDs."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>a});var i=r(6540);const s={},n=i.createContext(s);function l(e){const t=i.useContext(n);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);